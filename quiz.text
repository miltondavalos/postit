Why do they call it a relational database?
Because tables in a database are associated through primary/foreingh keys. There are One to Many and Many to Many relationships.

What is SQL?
Structured Query Language. In lame terms is the language that databases speak.

There are two predominant views into a relational database. What are they, and how are they different?
  Data and Schema views
In a table, what do we call the column that serves as the main identifier for a row of data? We're looking for the general database term, not the column name.
  The primary key

What is a foreign key, and how is it used?
The foreign key is used to map a relationship between a base table with another. A foreign key in one table is the primary key in another. The foreign key is present in the has_many.

At a high level, describe the ActiveRecord pattern. This has nothing to do with Rails, but the actual pattern that ActiveRecord uses to perform its ORM duties.
ActiveRecord is an ORM pattern in which tables are represented as classes and relationships are made so we don't have to directly execute sql queries, but rather call methods on the classes or instances of the classes.

If there's an ActiveRecord model called "CrazyMonkey", what should the table name be?
crazy_monkeys

If I'm building a 1:M association between Project and Issue, what will the model associations and foreign key be?
  The foreign key would be project_id if you follow convention over configuration
class Project < ActiveRecord::Base
	has_many :issues
end
class Issue < ActiveRecord::Base
	belongs_to :project
end

Given this code

class Zoo < ActiveRecord::Base
  has_many :animals
end
What do you expect the other model to be and what does database schema look like?
class Animal < ActiveRecord::Base
  belongs_ to :zoo
end

The zoos table will have a primary key of id and the animals table a foreing key of zoo_id

What are the methods that are now available to a zoo to call related to animals?
	Zoo.animals
	Zoo.animals.find(1)
	Zoo.animals.first
	Zoo.animals.last

How do I create an animal called "jumpster" in a zoo called "San Diego Zoo"?
	san_diego = Zoo.create(name: 'San Diego Zoo')
	jumpster = Animal.create(name: 'jumpster, zoo_id: san_diego.id)

What is mass assignment? What's the non-mass assignment way of setting values?
  when you pass values to attributes in the constructor is mass assignment eg. Post.new(title: 'x',url: 'y', description: 'z')
  No-mass when we use the default constructor with no arguments then call the setters on the instance  p = Post.new; p.title='x'

What does this code do? Animal.first
returns the first animal record from the database. first is equivalent to calling array of index 0 in the animals collection or in the case the collection of rows.

If I have a table called "animals" with columns called "name", and a model called Animal, how do I instantiate an animal object with name set to "Joe". Which methods makes sure it saves to the database?
joe = Animal.new(name: 'Joe')
then
joe.save
or
joe=Animal.create(name: 'Joe')

How does a M:M association work at the database level?
The many to many relationship can be normalized with a join table. Then we will have 3 tables and we can use has_many :through

What are the two ways to support a M:M association at the ActiveRecord model level? Pros and cons of each approach?
has_many :through -> it creates a join table and can add additional attributes
has_and_belongs_to_many -> does not create a join table, cannot add additional attributes.

Suppose we have a User model and a Group model, and we have a M:M association all set up. How do we associate the two?
We need to crate a join table  for example user_groups then
class User < ActiveRecord::Base
    has_many :user_groups
    has_many :groups, through: :user_groups
end
class UserGroup < ActiveRecord::Base
    belongs_to :user
    belongs_to :group
end
class Group < ActiveRecord::Base
    has_many :user_groups
    has_many :users, through: :user_groups
end